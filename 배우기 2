/*union all*/

select sum(temp) as temp,
		sum(humidity) as humidity
from(
	select 0 as 'temp', 65 as 'humidity' 
	union all
	select 30 as 'temp', 0 as 'humidity'
) tmp;

/* join은 테이블간의 관계를 맺을 때 사용한다
 
 union은 두 테이블의 중복된 데이터를 지운다
 union all은 지울건지 남길건지를 개발자의 몫으로 만든다
 union (all)은 여러 select의 결과를 하나의 결과처럼 결합할 때 사용한다.
 주의점: union하는 애들끼리 컬럼이 맞아야 한다. 컬럼 개수가 맞아야 한다.
 */


/*예시

장비이름     in_bps      out_bps       날짜
------------------------------------------
L4         300			400		2024-10-31
L4         320			410		2024-10-31
L4         320			410		2024-11-01


select 장비이름, in_bps, 0 as out_bps
from 장비_inbps_table
where = 'L4'
and 날짜 between '2024-10-30' and '2024-11-01';
union all
select 장비이름, 0, out_bps as out_bps
from 장비_out_bps_table
where = 'L4'
and 날짜 between '2024-10-30' and '2024-11-01';

 */



select*
from tb_members tm 
where (mem_name = '김명숙' or mem_name = '신선애')
	and mem_birth = 800910;
	

select *
from tb_members tm 
where mem_name IN('김명숙', '신선애');

select *
from(
	select '굴짬뽕' as menu
	union all
	select '백짬뽕' as menu
	union all
	select '차돌짬뽕' as menu
	union all
	select '사천짜장'as menu
	union all
	select '간짜장' as menu
)c
where menu in('굴짬뽕', '백짬뽕');

/* LIKE 절
  짬뽕으로 끝나는 글자 검색 =  %짬뽕
짬뽕으로 시작하는 글자 검색 = 짬뽕% 
짬뽕이 포함된 글자를 검색 = %짬뽕% 
OR를 적용할 수도 있다 */

select *
from(
	select '굴짬뽕' as menu
	union all
	select '백짬뽕' as menu
	union all
	select '차돌짬뽕' as menu
	union all
	select '사천짜장'as menu
	union all
	select '간짜장' as menu
)c
where menu like '%짬뽕%' or menu like '%짜장%';


/*정규식*/

select '1집2에3가4자' as sentence


select *
from (
		select '집에가자' as sentence
		union all
		select '1234' as sentence
		) a
where sentence regexp '[^0-9]';

alter table members add column mem_gender varchar(10) not null after mem_age;

drop table if exists book_list;
create table book_list(
	book_id varchar(100) not null comment '책코드',
	book_name varchar(100) not null comment '책이름',
	book_writer varchar(50) not null comment '저자',
	released_year date default now() comment '출시연도',
	book_price int default 0 comment '책 가격',
	primary key (book_id)
	
	);
	
drop table if exists  tb_members;
create table tb_members(

    mem_id   varchar(100)  not null comment '아이디',
    mem_name varchar(50)   not null comment '이름',
    mem_birth varchar(20)  not null comment '생년월일',
    mem_gender varchar(10) not null comment '성별',
    reg_date   datetime   default now() comment '등록일',
    update_date datetime  null          comment '수정일',
    primary key (mem_id)
);

insert into tb_members(mem_id, mem_name, mem_birth, mem_gender)
values ('mem01', '김명숙', '800910', '여성'),
       ('mem02', '이진명', '900710', '남성'),
       ('mem03', '박명지', '971110', '여성'),
       ('mem04', '신선애', '850910', '여성'),
       ('mem05', '최건호', '841120', '남성'),
       ('mem06', '최재영', '990220', '남성'),
       ('mem07', '송지영', '000601', '여성'),
       ('mem08', '박훈',  '781101', '남성'),
       ('mem09', '박민환',  '881211', '남성');


drop table if exists book_list;
create table book_list(

    book_id  varchar(100) not null comment '책코드',
    book_name varchar(100) not null  comment  '책이름',
    book_writer varchar(50) not null comment '저자',
    released_year date   default now() comment '출시 연도',
    book_price    int    default 0     comment '책 가격',
    primary key (book_id)

);

insert into book_list(book_id, book_name, book_writer, released_year, book_price)
values('bk1001', '재미있는 mysql 이야기',   '권순철',   '2023-10-01',  27000),
      ('bk1002', '재미있는 JAVA 이야기',    '권순철',   '2024-07-10', 37000),
      ('bk1003', '개바자가 되는 방법',       '감명수',   '2023-05-01',  32000),
      ('bk1004', '뇌를 자극하는 파이썬',     '민수기',   '2023-11-11',  35000),
      ('bk1005', '자바의 정석',            '남궁성',   '2023-7-30',   29000),
      ('bk1006', '이것이 Mysql 이다',      '우재남',   '2022-05-10',   28800),
      ('bk1007', '비전공자도 쉽게익히는 IT',  '신용복',   '2022-01-01',  29000),
      ('bk1008', '자바로 배우는 알고리즘',    '이성적',   '2022-07-01',  27000),
      ('bk1009', 'DBMS 실습과 이론',       '서성자',   '2021-04-06',  33000),
      ('bk1010', '프론트앤드 개발실습 For react',   '신수기',  '2021-08-15', 39000);


drop table if exists  book_order;
create table book_order(
    order_id         int auto_increment  not null  comment '주문 번호',
    order_member     varchar(100)  not null   comment '주문한사람',
    book_id          varchar(100) not null comment '책코드',
    order_count      int          default 1  comment '주문 수량',
    order_date       date   default now() comment '주문 일자',
    order_status     varchar(10)   not null comment  '주문상태(R요청, D 배송 E 종료)',

    primary key (order_id),
    constraint order_fk foreign key (order_member) references tb_members(mem_id)
);



insert  into book_order(order_member, book_id, order_count, order_date, order_status)
values('mem01', 'bk1002', 1, '2024-10-07', 'E'),
      ('mem01', 'bk1003', 1, '2024-10-07', 'E'),
      ('mem02', 'bk1007', 1, '2024-09-27', 'E'),
      ('mem02', 'bk1004', 1, '2023-12-07', 'E'),
      ('mem03', 'bk1008', 1, '2022-10-07', 'E'),
      ('mem03', 'bk1005', 1, '2024-01-07', 'E'),
      ('mem05', 'bk1010', 3, '2023-10-07', 'E'),
      ('mem06', 'bk107',  2, '2022-08-07', 'E'),
      ('mem06', 'bk1009', 1, '2023-10-22', 'E');

select *
from tb_members;

select *
from book_order;

select *
from book_list;

select 	tm.mem_id,
		tm.mem_name,
		bo.order_id,
		bo.book_id,
		bo.order_count,
		bl.book_name
from tb_members tm
	left join book_order bo on tm.mem_id = bo.order_member
	left join book_list bl on bo.book_id = bl.book_id
order by tm.mem_name  asc;


/*더 나은 방법*/

select 	tm.mem_id,
		tm.mem_name,
		bo.order_id,
		bo.book_id,
		(select book_name 
		from book_list bl 
		where bo.book_id = bl.book_id
		) as book_name,
		bo.order_count
from tb_members tm
	left join book_order bo on tm.mem_id = bo.order_member
order by tm.mem_name  asc;

/*Null 처리 함수*/

select mem_id,
		mem_name,
		ifnull(order_id, 0) as order_id,
		ifnull(book_id, 0) as book_id,
		ifnull(book_name, '') as book_name,
		ifnull(order_count, 0) as order_count
from(
select 	tm.mem_id,
		tm.mem_name,
		bo.order_id,
		bo.book_id,
		(select book_name 
		from book_list bl 
		where bo.book_id = bl.book_id
		) as book_name,
		bo.order_count
from tb_members tm
	left join book_order bo on tm.mem_id = bo.order_member
	) sub
order by mem_name asc;

/*마리아 DB는 가상 테이블에 무조건 이름을 붙여야함 sub*/


/* 주제: 자유, 내용: 자유
다이어트 식품 주문 프로그램
엔터티: 메뉴  
속성
관계 */

/* view 테이블 만들기 */

drop table if exists contacts;

create 	table user_info(
		user_id varchar(100) not null,
		user_paswd varchar(100) not null,
		contact_id varchar(100) not null,
		user_role varchar(100) not null,
		user_pos varchar(10) not null,
		primary key(user_id)
)engine = 'INNODB' 
default charset = 'utf8mb4'
collate = 'utf8mb4_general_ci';

/* 
 engine = 데이터들을 어떻게 삽입하고 출력할 것이냐에 따른 매커니즘, DEFAULT 값은 INNODB다.
 만약에 A사이트의 회원 정보를 B사이트로 옮기고 싶을 때 페너레이트를 사용해야 한다.
 엔진에 따라 테이블의 쓰임새가 달라진다.
 
 default charset = 안 주면 기본 캐릭터 셋을 따라간다. 
 만약 특정 테이블들 (특수기호, 영어) 캐릭터 셋을 따로 잡아줄 수 있다.
 
 collate = 문자 정렬

general_ci = 대문자 소문자 구분 없이 정렬 해라
원래는 A ~ Z  a ~ z이다. 아스키 코드 */

create table contacts(
		contact_id varchar(100) not null,
		mails varchar(100) not null,
		name varchar(100) not null,
		phone varchar(100) not null,
		gender varchar(10) not null,
		reg_date datetime default now(),
		update_date datetime default null,
		primary key(contact_id)		
);

create table user_role(
		role_id varchar(100) not null,
		role_name varchar(100) not null,
		used_yn char(1) default 'Y',
		primary key(role_id)
);
	
	create table positions(
		pos_code varchar(100) not null,
		pos_name varchar(100) not null,
		used_yn char(1) default 'Y',
		primary key(pos_code)
);

/* 요즘 테이블을 구성할 때 사용자의 공적 정보과 사적 정보를 나눈다.*/

/* 기본적으로 잡을 키가 없으면 시퀀스 = 일리 없는 기본키, 
 시퀀스는 중복되지 않는다 = 기본키의 조건에 부합함 (중복이 안된다)
 seq int auto_increment */

insert into positions (pos_code, pos_name)
values ('ps01', '사원'),
('ps02', '사원'),
('ps03', '주임'),
('ps04', '대리'),
('ps05', '과장'),
('ps06', '차장'),
('ps07', '부장'),
('ps08', '이사'),
('ps09', '대표');


insert into user_role(role_id, role_name)
values ('role101', 'user'),
('role102', 'manager'),
('role103', 'admin');

insert into contacts(contact_id, name, mails, phone, gender)
values ('ct101', '김철수', 'csk@naver.com', '010-1111-2222', '남성'),
('ct102', '오미영', 'my0@naver.com', '010-1111-2232', '여성'),
('ct103', '이소마', 'soma@naver.com', '010-1111-2242', '남성'),
('ct104', '최상훈', 'sanghun@naver.com', '010-1111-2252', '남성'),
('ct105', '서민지', 'minji@naver.com', '010-1111-2262', '여성');

insert into user_info(user_id, contact_id, user_paswd, user_role, user_pos)
values('admin','ct104', '1234', 'role103', 'ps07'),
('user01', 'ct101', '1234', 'role101', 'ps03'),
('manager01', 'ct105', '1234', 'role102', 'ps05'),
('user02', 'ct103', '1234', 'role101', 'ps02'),
('user03', 'ct102', '1234', 'role101', 'ps03');

create view user_main_info as 
select u.user_id,
		c.name,
		c.mails,
		c.phone,
		c.gender,
		ur.role_name,
		p.pos_name
from user_info u
	inner join contacts c on u.contact_id = c.contact_id
	inner join user_role ur on u.user_role = ur.role_id
	inner join positions p on u.user_pos = p.pos_code;

/*뷰로 만드는 방법
 create view 
 이후에 view를 쓰는 법, select * from 이름, 여기선 user_main_info;
 왼쪽 항목에서 views를 새로고침 하자 그러면 보임 
 
 뷰를 만드는 이유는 편의성 떄문에 만드는 것이다
 너무 많은 데이터를 가진 sql문을 뷰로 만드는 것은 좋지 않다 = 성능 저하
 join도 너무 많이 쓰면 성능 저하
 */

select * from user_main_info;

/* index = 빠른 조회
 인덱스 역효과 삼인방
 1. 데이터의 분포가 너무 좋은 아이가 있으면 (이쁜 테이블) index를 써봐야 효과가 없다 = 걸리는 것이 없어서
 2. 데이터의 너무 양이 적은면 index를 쓰지 않는다.
 3. 컬럼이 너무 적을 때 index를 걸지 않는다.
 
 unique, 컬럼의 갯수 4~5개 이상, 데이터 양이 많으면 index를 쓴다.
 
 우리가 만드는 key들은 기본적으로 인덱스가 만들어진다 = b-tree 인덱스
 full text index = ai에서 사용, 단어가 아닌 문장을 서치한다. 빅데이터할 때 full text를 쓴다.
 
인덱스 쓰는 조건 = 데이터의 양이 많아야 한다 단, 1000만개 이상은 힘듬
				검색을 자주하는 데이터
				단독 테이블은 인덱스를 굳이 걸 필요가 없다, 테이블 간에 검색, 관계를 잘 맺는 경우 인덱스를 쓴다.
				WHERE 조건절이 많을 경우
				인덱스는 DBA가 건다.
 */
drop index idx_phone on emps;

create index 묶음 이름 on 테이블 이름(컬럼)
create index idx_phone on emps(em_phone);

explain
select * from emps where em_phone = 'em_phone';

/*힌트*/
explain
select * from emps use index (idx_phone) where em_phone ='em_phone'


create index_phone_name on emps(이름);
create index_phone_nm_ag on emps(이름, 나이);
create index_phone_gen on emps(성별);

/* 묶음 이름은 중복되면 안된다, 컬럼은 중복되어도 된다.*/


set profiling = 1;

show profiles;

set profiling_history_size = 100;

show profile for query 2;

select *
from user_info;


select name,
		age,
		if(age > 19, '성인', if (age > 13, '청소년', '어린이')) as '단위'
from(
select '홍길동' as name, 17 as age
union all
select '김철수' as name, 13 as age
union all
select '박자영' as name, 21 as age
)users;

/*case 문*/

select name,
		age,
		case when age > 19 then '어른'
			when age > 15 then '청소년'
			when age > 7 then '어린이'
		else '미취학 아동'
		end as '등급'
from(
select '홍길동' as name, 17 as age
union all
select '김철수' as name, 13 as age
union all
select '박자영' as name, 21 as age
)users;

/*decode문
  치환할 떄 쓴다 (if문의 연속형), 항목별 */

select name,
		age,
		case when age > 19 then '어른'
			when age > 15 then '청소년'
			when age > 7 then '어린이'
		else '미취학 아동'
		end as '등급',
		decode_oracle(gender, 'M', '남성', 'F', '여성') as gender
from(
select '홍길동' as name, 17 as age, 'M' as gender
union all
select '김철수' as name, 13 as age, 'M' as gender
union all
select '박자영' as name, 21 as age, 'F' as gender
)users;


/* today's quiz */


/* 1.  관계형 데이터베이스란?
 
 데이터를 테이블 형식 (행과 열)으로 저장하고 관리하는 데이터베이스 + 테이블들이 서로 관계를 가지는 DB.
 최소한의 키워드로 최대한의 데이터를 추출할 수 있도록 데이터들 간에 관계를 지어 형성하는 것을 관계형 데이터 베이스다.
 	
 
 2.	두개의 연관된 테이블이 있다. 하나는 사용자 정보, 하나는 사용자 취미이다. 
 두개의 테이블에서 데이터를 추출하기 위해서 사용하는 기법을 무엇이라 하는가?
 = 조인
 
  3.테이블을 만들 때에는 key가 필요하다. key에 대한 설명을 하시오
 
  primary key = 한 테이블이 가지는 고유하고 중복되지 않는 키, 고로 하나의 데이터(레코드)를 식별할 수 있다. 1개만 존재 가능
  (테이블이 가지는 컬럼 중에서 레코드를 식별할 수 있는 데이터가 있는 컬럼에 부여한다. 즉, 하나의 데이터를 식별할 수 있는 메인 key를 의미한다.)
  foreign key = 다른 테이블의 primary key이자 두 테이블의 관계를 맺게 해주는 키.
  (관계를 맺어야 하기 때문에 외래키는 다른 테이블의 기본키 중에서만 될 수 있다.)
  unique key = 테이블 내에서 고유한 값을 가져야 하는 조건이다.
  
  */

/* 테이블을 다음 조건을 이용하여 만들어 보세요
 컬럼은 이름(문자), 나이(숫자), 성별(문자), 모바일번호(문자), 이메일(문자) 
 
 ac_phone은 varchar로 저장하는 것이 더 일반적이고 편리하다.
 */

create table korea_ac (
			ac_id int not null comment '학생 번호',
			ac_name varchar(50) not null comment '학생 번호',
			ac_age int not null comment '나이',
			ac_gender char(1) not null comment '성별, 남/여',
			ac_phone int not null comment '모바일 번호',
			ac_email varchar (100) not null comment '이메일',
			primary key(ac_id)
)engine = 'INNODB' 
default charset = 'utf8mb4'
collate = 'utf8mb4_general_ci';

drop table korea_ac;

/* 다음은 학생 테이블에서 성씨가 김씨인 학생을 출력하려고 합니다. 만약 다음과 같은 결과를 얻으려면 어떤 sql를 작성해야 하는가?
	테이블이 있다는 가정 하에 다음과 다음을 만족하는 조건식을 SQL로 작성해보시오 
   */

select *
from stu
where last_name = '김'
order by stu_name asc;

select *
from stu
where 학생 이름 like '김%';

/* 다음 문장에서 틀린 것을 찾고 올바르게 고치시오
 
 select *
 from 학생정보 h
 	left join 학생성적 s on h.id = s.id and h.name = '홍길동';
 	
 	해당 구문은 문법적으로 틀리지 않았으나 ,실제 데이터가 잘못나올 수 있다. 틀린 이유와 제대로된 문장으로 고쳐봅시다.
 	
 select *
 from 학생정보 h
 	left join 학생성적 s on h.id = s.id
 where h.name = '홍길동';
 	
 ANSI 조인을 사용할 경우, 테이블 관계를 위한 조건과
filter를 위한 조건이 분리된다.

on 뒤에는 테이블의 관계를 위한 조건만 존재해야하며,
filter를 위한 조건은 where 조건절을 사용한다.
 */

